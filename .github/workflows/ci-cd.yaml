name: Backend CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  IMAGE_NAME: vexced17/ara_culture_backend
  IMAGE_TAG: ${{ github.sha }}


jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-


      - name: Build project
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test

      - name: SonarQube Analysis
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=Ara_culture_backend
            -Dsonar.organization=vexced
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.java.binaries=target/classes

      - name: Upload JAR
        uses: actions/upload-artifact@v4.6.2
        with:
          name: backend-jar
          path: target/araculture-backend.jar

  snyk-scan:
    runs-on: ubuntu-latest
    needs: build-test-analyze

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Scan
        run: snyk test --all-projects --fail-on=all
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker:
    needs: [build-test-analyze, snyk-scan]
    runs-on: ubuntu-latest
    if: needs.snyk-scan.result == 'success'

    steps:
      - name: Checkout frontend
        uses: actions/checkout@v3

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download JAR
        uses: actions/download-artifact@v5.0.0
        with:
          name: backend-jar
          path: target

      - name: Build Docker image backend
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Push Docker image backend
        run: docker push $IMAGE_NAME:$IMAGE_TAG